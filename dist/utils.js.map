{"version":3,"sources":["../utils.js"],"names":["printSelectedMessage","getMessageTime","initDayState","filePath","printCallback","selectedMessage","readFile","error","messages","today","format","forEach","message","shouldBeDiplayOn","haveBeenDiplayedOn","id","writeFile","err","console","content","messageTime","set","Math","floor","random","shouldDiplayMessage","typedCode","now","lightWasOn","isTopOpen","heart"],"mappings":";;;;;;QAKgBA,oB,GAAAA,oB;QA8BAC,c,GAAAA,c;QAOAC,Y,GAAAA,Y;;AA1ChB;;;;AACA;;;;;;AAEA,IAAIC,WAAW,iBAAf;;AAEO,SAASH,oBAAT,CAA8BI,aAA9B,EAA6C;AAC5C,QAAIC,kBAAkB,EAAtB;AACA,uBAASC,QAAT,CAAkBH,QAAlB,EAA4B,UAAUI,KAAV,EAAiBC,QAAjB,EAA2B;AACnD,YAAIA,QAAJ,EAAc;AACV,gBAAIC,QAAQ,wBAASC,MAAT,CAAgB,UAAhB,CAAZ;AACAF,qBAASG,OAAT,CAAiB,UAAUC,OAAV,EAAmB;AAChC,oBAAIA,QAAQC,gBAAR,KAA6BJ,KAA7B,IAAsCG,QAAQE,kBAAR,KAA+BL,KAAzE,EAAgF;AAC5EJ,sCAAkBO,OAAlB;AACH,iBAFD,MAEO,IAAI,CAACA,QAAQE,kBAAT,IAA+BT,oBAAoB,EAAnD,IAAyDO,QAAQC,gBAAR,KAA6B,EAA1F,EAA8F;AACjGR,sCAAkBO,OAAlB;AACH;AACJ,aAND;AAOAJ,qBAASH,gBAAgBU,EAAzB,EAA6BD,kBAA7B,GAAkDL,KAAlD;AACA,+BAASO,SAAT,CAAmBb,QAAnB,EAA6BK,QAA7B,EAAuC,UAAUS,GAAV,EAAe;AAClD,oBAAIA,GAAJ,EAAS;AACLC,4BAAQX,KAAR,CAAcU,GAAd;AACH;AACJ,aAJD;AAKAb,0BAAcC,gBAAgBc,OAA9B;AACH;AACJ,KAlBD;AAmBP;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASlB,cAAT,GAA0B;AAC7B,QAAImB,cAAc,uBAAlB;AACAA,gBAAYC,GAAZ,CAAgB,MAAhB,EAAwBC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,MAAiB,KAAK,CAAtB,CAAX,IAAuC,CAA/D;AACAJ,gBAAYC,GAAZ,CAAgB,QAAhB,EAA0BC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAiB,EAA5B,CAA1B;AACA,WAAOJ,WAAP;AACH;;AAEM,SAASlB,YAAT,GAAwB;AAC3B,WAAO;AACHkB,qBAAanB,gBADV;AAEHwB,6BAAqB,KAFlB;AAGHC,mBAAW,EAHR;AAIHC,aAAK,uBAJF;AAKHC,oBAAY,KALT;AAMHC,mBAAW;AANR,KAAP;AAQH;;AAEM,IAAIC,wBAAQ,CACf,kBADe,EAEf,kBAFe,EAGf,kBAHe,EAIf,kBAJe,EAKf,kBALe,EAMf,kBANe,EAOf,kBAPe,EAQf,kBARe,CAAZ","file":"utils.js","sourcesContent":["import jsonfile from 'jsonfile';\nimport moment from 'moment';\n\nvar filePath = './messages.json';\n\nexport function printSelectedMessage(printCallback) {\n        var selectedMessage = '';\n        jsonfile.readFile(filePath, function (error, messages) {\n            if (messages) {\n                var today = moment().format('DD/MM/YY');\n                messages.forEach(function (message) {\n                    if (message.shouldBeDiplayOn === today || message.haveBeenDiplayedOn === today) {\n                        selectedMessage = message;\n                    } else if (!message.haveBeenDiplayedOn && selectedMessage === '' && message.shouldBeDiplayOn === '') {\n                        selectedMessage = message;\n                    }\n                });\n                messages[selectedMessage.id].haveBeenDiplayedOn = today;\n                jsonfile.writeFile(filePath, messages, function (err) {\n                    if (err) {\n                        console.error(err);\n                    }\n                });\n                printCallback(selectedMessage.content);\n            }\n        });\n}\n//\n// export function getMessageTime() {\n//     var messageTime = moment();\n//     messageTime.set('hour', Math.floor(Math.random() * (23 - 19)) + 19);\n//     messageTime.set('minute', Math.floor(Math.random() * (60)));\n//     console.log(\"==========  New message time : \" + messageTime.format(\"D/M/YY Ã  H:mm:ss\"));\n//     return messageTime;\n// }\nexport function getMessageTime() {\n    var messageTime = moment();\n    messageTime.set('hour', Math.floor(Math.random() * (20 - 6)) + 6);\n    messageTime.set('minute', Math.floor(Math.random() * (60)));\n    return messageTime;\n}\n\nexport function initDayState() {\n    return {\n        messageTime: getMessageTime(),\n        shouldDiplayMessage: false,\n        typedCode: '',\n        now: moment(),\n        lightWasOn: false,\n        isTopOpen: false\n    };\n}\n\nexport var heart = [\n    '0110011001100110',\n    '1001100110011001',\n    '1000000110000001',\n    '1000000110000001',\n    '0100001001000010',\n    '0010010000100100',\n    '0001100000011000',\n    '0000000000000000',\n];"]}